/*----------------------------------------------------
* Xyna 5.1 (Black Edition)
* Utils
*----------------------------------------------------
* Copyright GIP AG 2013
* (http://www.gip.com)
* Hechtsheimer Str. 35-37
* 55131 Mainz
*----------------------------------------------------
* $Revision:$
* $Date:$
*----------------------------------------------------
*/
package com.gip.xyna.xnwh.persistence;

import com.gip.xyna.utils.exceptions.XynaException;
import java.util.List;
import java.lang.NoSuchFieldException;
import java.util.concurrent.ConcurrentHashMap;
import java.lang.Class;
import java.lang.reflect.Field;
import java.lang.IllegalArgumentException;
import java.util.concurrent.ConcurrentMap;

//DO NOT CHANGE
//GENERATED BY com.gip.xyna.utils.exceptions.utils.codegen.JavaClass 2022-08-26T15:32:29Z;
public abstract class PersistenceLayerException extends XynaException {

  private static ConcurrentMap<String, Field> fieldMap = new ConcurrentHashMap();


  public PersistenceLayerException() {
    super(new String[]{});
  }

  public PersistenceLayerException(Throwable cause) {
    super(new String[]{}, cause);
  }

  protected PersistenceLayerException(String[] args) {
    super(args);
  }

  protected PersistenceLayerException(String[] args, Throwable cause) {
    super(args, cause);
  }

  protected void refreshArgs() {
    String[] args = getArgs();
  }

  public PersistenceLayerException initCause(Throwable t) {
    return (PersistenceLayerException) super.initCause(t);
  }

  public static Field getField(String target_fieldname) {
    Field foundField = null;
    foundField = fieldMap.get(target_fieldname);
    if (foundField != null) {
      return foundField;
    }
    try {
      foundField = PersistenceLayerException.class.getDeclaredField(target_fieldname);
    } catch (NoSuchFieldException e) {
    }
    if (foundField == null) {
      throw new IllegalArgumentException("Parameter 'target_fieldname' not found");
    } else {
      foundField.setAccessible(true);
      fieldMap.put(target_fieldname, foundField);
      return foundField;
    }
  }



}
